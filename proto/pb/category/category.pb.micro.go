// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: category.proto

package pb

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...client.CallOption) (*CreateCategoryRsp, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...client.CallOption) (*UpdateCategoryRsp, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*DeleteCategoryRsp, error)
	FindAllCategory(ctx context.Context, in *FindAllCategoryReq, opts ...client.CallOption) (*FindAllCategoryRsp, error)
	FindCategoryByName(ctx context.Context, in *FindCategoryByNameReq, opts ...client.CallOption) (*FindCategoryByNameRsp, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) CreateCategory(ctx context.Context, in *CreateCategoryReq, opts ...client.CallOption) (*CreateCategoryRsp, error) {
	req := c.c.NewRequest(c.name, "Category.CreateCategory", in)
	out := new(CreateCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, opts ...client.CallOption) (*UpdateCategoryRsp, error) {
	req := c.c.NewRequest(c.name, "Category.UpdateCategory", in)
	out := new(UpdateCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*DeleteCategoryRsp, error) {
	req := c.c.NewRequest(c.name, "Category.DeleteCategory", in)
	out := new(DeleteCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindAllCategory(ctx context.Context, in *FindAllCategoryReq, opts ...client.CallOption) (*FindAllCategoryRsp, error) {
	req := c.c.NewRequest(c.name, "Category.FindAllCategory", in)
	out := new(FindAllCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindCategoryByName(ctx context.Context, in *FindCategoryByNameReq, opts ...client.CallOption) (*FindCategoryByNameRsp, error) {
	req := c.c.NewRequest(c.name, "Category.FindCategoryByName", in)
	out := new(FindCategoryByNameRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	CreateCategory(context.Context, *CreateCategoryReq, *CreateCategoryRsp) error
	UpdateCategory(context.Context, *UpdateCategoryReq, *UpdateCategoryRsp) error
	DeleteCategory(context.Context, *DeleteCategoryReq, *DeleteCategoryRsp) error
	FindAllCategory(context.Context, *FindAllCategoryReq, *FindAllCategoryRsp) error
	FindCategoryByName(context.Context, *FindCategoryByNameReq, *FindCategoryByNameRsp) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		CreateCategory(ctx context.Context, in *CreateCategoryReq, out *CreateCategoryRsp) error
		UpdateCategory(ctx context.Context, in *UpdateCategoryReq, out *UpdateCategoryRsp) error
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *DeleteCategoryRsp) error
		FindAllCategory(ctx context.Context, in *FindAllCategoryReq, out *FindAllCategoryRsp) error
		FindCategoryByName(ctx context.Context, in *FindCategoryByNameReq, out *FindCategoryByNameRsp) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) CreateCategory(ctx context.Context, in *CreateCategoryReq, out *CreateCategoryRsp) error {
	return h.CategoryHandler.CreateCategory(ctx, in, out)
}

func (h *categoryHandler) UpdateCategory(ctx context.Context, in *UpdateCategoryReq, out *UpdateCategoryRsp) error {
	return h.CategoryHandler.UpdateCategory(ctx, in, out)
}

func (h *categoryHandler) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *DeleteCategoryRsp) error {
	return h.CategoryHandler.DeleteCategory(ctx, in, out)
}

func (h *categoryHandler) FindAllCategory(ctx context.Context, in *FindAllCategoryReq, out *FindAllCategoryRsp) error {
	return h.CategoryHandler.FindAllCategory(ctx, in, out)
}

func (h *categoryHandler) FindCategoryByName(ctx context.Context, in *FindCategoryByNameReq, out *FindCategoryByNameRsp) error {
	return h.CategoryHandler.FindCategoryByName(ctx, in, out)
}
